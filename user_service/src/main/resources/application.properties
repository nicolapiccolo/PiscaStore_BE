#spring.datasource.url=jdbc:postgresql://ec2-54-74-60-70.eu-west-1.compute.amazonaws.com:5432/d74435s8qf4g9i?user=wioqkecbiscadt&password=41724b4c093f744507025491a3cecc198cd5a80cd148ff52ffa4893516e4a761
#jdbc:postgresql://<host>:<port>/<dbname>?user=<username>&password=<password>
#spring.datasource.username=wioqkecbiscadt
#spring.datasource.password=41724b4c093f744507025491a3cecc198cd5a80cd148ff52ffa4893516e4a761


spring.datasource.url=jdbc:postgresql://dbpostgresql_user:5432/userdb
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=admin
spring.datasource.password=admin


sslmode=require

# Keep the connection alive if idle for a long time (needed in production)
##spring.datasource.testWhileIdle=true
##spring.datasource.validationQuery=SELECT 1
## ===============================
## = JPA / HIBERNATE
## ===============================
## Show or not log for each sql query

spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update
spring.application.name=user-service
server.port=8081

#security
spring.security.oauth2.client.registration.google.clientId=88968581162-nn91gvn74h74nu40ald23ss6faq5dk3a.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=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

# App Properties
pisca.app.jwtSecret= piscaSecretKey
pisca.app.jwtExpirationMs= 86400000


#RabbitMQ configuration for Receiver
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.password: guest
spring.rabbitmq.port: 15672
spring.rabbitmq.username: guest

spring.rabbitmq.r_exchange: user.exchange
spring.rabbitmq.r_queue: user.queue
spring.rabbitmq.r_routingkey: user.routingkey

spring.rabbitmq.s_exchange: catalog.exchange
spring.rabbitmq.s_queue: catalog.queue
spring.rabbitmq.s_routingkey: catalog.routingkey

spring.main.allow-bean-definition-overriding=true